import { app, BrowserView, BrowserWindow, ipcMain, shell } from 'electron';
import * as fs from 'fs';
import util from 'util';

const readFile = util.promisify(fs.readFile);

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const CONTROLS_WEBPACK_ENTRY: string;

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

function sleep(time: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, time));
}

const directions = [
  { from: 'MSQ', to: 'TBS' },
  { from: 'MSQ', to: 'KUT' },
  { from: 'MSQ', to: 'BUS' }
];

let directionIndex = 0;

const dateMin = new Date();
const dateMax = new Date(2022, 10 - 1, 1);

const currentDate = new Date(dateMin.getTime());

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let lastUrl = '';

const createWindow = async (): Promise<void> => {

  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    backgroundColor: '#444'
    // webPreferences: {
    //   preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    // },
  });

  const controlsView = new BrowserView({
    webPreferences: {
      preload: CONTROLS_WEBPACK_ENTRY
    }
  });

  controlsView.webContents.loadURL(CONTROLS_WEBPACK_ENTRY);

  const belaviaView = new BrowserView({
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  mainWindow.setBrowserView(belaviaView)

  belaviaView.setBounds({ x: 200, y: 50, width: 1000, height: 750 })
  belaviaView.setAutoResize({ width: true, height: true });

  // Open the DevTools.
  belaviaView.webContents.openDevTools();

  console.log(`CONTROLS_WEBPACK_ENTRY: ${CONTROLS_WEBPACK_ENTRY}`)

  console.log(`MAIN_WINDOW_WEBPACK_ENTRY: ${MAIN_WINDOW_WEBPACK_ENTRY}`)
  console.log(`MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: ${MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY}`)

  mainWindow.on('page-title-updated', function (e) {
    e.preventDefault();
  });

  belaviaView.webContents.on('did-finish-load', async () => {
    console.log('belaviaView did-finish-load');

    if (MAIN_WINDOW_WEBPACK_ENTRY.startsWith('file://')) {
      try {
        const scriptDataBuffer = await readFile(MAIN_WINDOW_WEBPACK_ENTRY.replace('file://', ''));
        const scriptData = scriptDataBuffer.toString();

        console.log(scriptData);

        await belaviaView.webContents.executeJavaScript(`
        const po = document.createElement('script');
        po.text = \`${scriptData}\`;
        document.body.appendChild(po);
    `);

        return;
      }

      catch (e) {
        console.error(e);

        throw e;
      }
    }

    belaviaView.webContents.executeJavaScript(`
      (function() {
        var po = document.createElement('script');
        po.type = 'text/javascript';
        po.async = true;
        po.src = '${MAIN_WINDOW_WEBPACK_ENTRY}';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(po, s);
      })();
    `);
  });

  function formatDate(date: Date): string {
    const monthFormatted = (date.getMonth() + 1).toString().padStart(2, '0');
    const dateFormatted = date.getDate().toString().padStart(2, '0');

    const dateString = `${date.getFullYear()}${monthFormatted}${dateFormatted}`;
    return dateString;
  }

  function findTickets(airportFrom: string, airportTo: string, date: Date): void {
    console.log(currentDate.toLocaleDateString());

    const journey = `${airportFrom}${airportTo}${formatDate(date)}`;

    lastUrl = `https://ibe.belavia.by/select?journeyType=Ow&journey=${journey}&adults=1&children=0&infants=0&lang=en`;

    console.log(`lastUrl: ${lastUrl}`);

    belaviaView.webContents.loadURL(lastUrl);

    mainWindow.setTitle(`${airportFrom} --> ${airportTo}  | ${date.toLocaleDateString('ru-RU', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`);
  }

  ipcMain.removeHandler('on-tickets');

  ipcMain.handle('on-tickets', async (event, ticketCount: number) => {
    console.log(`Found tickets ${ticketCount}`);

    if (ticketCount > 0) {
      console.log(`SUCCESS`);
      shell.openExternal(lastUrl)
      return;
    }

    if (directionIndex < directions.length - 1) {
      directionIndex++;

      const direction = directions[directionIndex];

      await sleep(Math.round(5000 * Math.random() + 1000));
      findTickets(direction.from, direction.to, currentDate);
      return;
    }

    // дошли до конца дат
    if (directionIndex === directions.length - 1) {

      directionIndex = 0;
    } else {
      directionIndex++;
    }

    currentDate.setDate(currentDate.getDate() + 1);

    const dayAfterMax = new Date(dateMax.getTime());
    dayAfterMax.setDate(dayAfterMax.getDate() + 1);

    if (currentDate > dayAfterMax) {
      console.log('start searching from the beginning');

      directionIndex = 0;
      currentDate.setTime(dateMin.getTime());
    }

    const direction = directions[directionIndex];
    await sleep(Math.round(5000 * Math.random()) + 1000);
    findTickets(direction.from, direction.to, currentDate);
  });

  const direction = directions[directionIndex];
  findTickets(direction.from, direction.to, currentDate);


};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
