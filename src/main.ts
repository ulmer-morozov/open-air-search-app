import { app, BrowserWindow, ipcMain, protocol } from 'electron';
import path from 'path';
import { BelaviaWindowHandler } from "./vendors/belavia/BelaviaWindowHandler";
import { getStoredSettings, storeSettings } from './utils-node';
import { ITicketSearchParameters } from './ITicketSearchParameters';
import { controlsWindowWidth } from './constants';
import { ITicketFoundData } from './ITicketFoundData';
import { AviaVendor } from './AviaVendor';
import { TicketSearchManager } from './TicketSearchManager';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const CONTROLS_WEBPACK_ENTRY: string;
declare const CONTROLS_PRELOAD_WEBPACK_ENTRY: string;

console.log(`CONTROLS_WEBPACK_ENTRY: ${CONTROLS_WEBPACK_ENTRY}`);
console.log(`CONTROLS_PRELOAD_WEBPACK_ENTRY: ${CONTROLS_PRELOAD_WEBPACK_ENTRY}`);

const searchManagerMap = new Map<AviaVendor, TicketSearchManager>();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

ipcMain.handle('get-settings', async (): Promise<ITicketSearchParameters> => {
  const settings = await getStoredSettings();
  return settings;
});

const createWindow = async (): Promise<void> => {
  const controlsWindow = new BrowserWindow({
    width: controlsWindowWidth,
    height: 700,
    minWidth: controlsWindowWidth,
    maxWidth: controlsWindowWidth,
    backgroundColor: '#444',
    webPreferences: {
      preload: CONTROLS_PRELOAD_WEBPACK_ENTRY
    }
  });

  searchManagerMap.clear();
  ipcMain.removeHandler('on-tickets');
  ipcMain.removeHandler('search-tickets-start');
  ipcMain.removeHandler('search-tickets-stop');

  // controlsWindow.webContents.openDevTools({ mode: 'detach' });
  controlsWindow.webContents.loadURL(CONTROLS_WEBPACK_ENTRY);

  const belaviaHandler = new BelaviaWindowHandler();
  const belaviaSearchManager = new TicketSearchManager({ windowHandler: belaviaHandler });

  searchManagerMap.set(AviaVendor.Belavia, belaviaSearchManager);

  ipcMain.handle('search-tickets-start', async (_event, sp: ITicketSearchParameters) => {
    console.log(sp);

    searchManagerMap.forEach(x => x.start(sp));

    await storeSettings(sp);
  });

  ipcMain.handle('search-tickets-stop', () => {
    searchManagerMap.forEach(x => x.stop());
  });

  ipcMain.handle('on-tickets', async (_event, data: ITicketFoundData) => {
    const manager = searchManagerMap.get(data.vendor);

    if (manager === undefined || manager === null)
      throw new Error(`Can not process ticket data because vendor ${data.vendor} not found`);

    if (data.count === 0) {
      manager.next();
      return;
    }

    manager.ticketsFound(data.count);
  });

  controlsWindow.maximize();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {

  const result = protocol.registerFileProtocol('webpackfile', (request, callback) => {
    const url = request.url.replace('webpackfile://', '');
    const normalizedUrl = path.normalize(url);

    console.log(`${request.url} --> ${normalizedUrl}`);

    callback({ path: normalizedUrl })
  });

  if (!result)
    throw new Error('Cannot register file protocol');

  await createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
